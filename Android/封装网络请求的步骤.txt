1、编写INetwork接口，里面只有两个方法

  //获取网络请求参数
  public Map<String, Object> getSubmitData();

  //处理网络请求结果
  public String result(String result);


2、编写弹出框控制器DialogControl类
  1)定义变量
    Context context ;
    ProgressDialog dialog ;//弹出框
    int currentTask = 0; //当前执行的任务
    int totalNum = 0; //需要执行的网络请求的总数
    int doneNum =  0; //已经执行完成的任务(网络请求)数
    ArrayList<AsyncTask<?, ?, ?>> tasks = new ArrayList<AsyncTask<?,?,?>>() ;  \\网络请求任务集合

  2)编写构造器
    public DialogConttrol(Context context, int totalNum){
      this.context = context ;
      this.totalNum = totalNum ;
    }

  3) 为dialog提供getter,setter 方法

    4)提供方法，
      //创建弹出框
      public ProgressDialog createDialog(){
        ProgressDialog dialog = new ProgressDialog(context, ProgressDialog.STYLE_SPINNER);
        this.dialog = dialog;
        return dialog;
      }

      //展示弹出框
      public void show(AsyncTask<?, ?, ?> asyn){
        tasks.add(asyn);
        currentTask++;
        if(currentTask == 1 && dialog != null){
          dialog.show();
        }
      }

      //根据完成任务数，判断是否需要让Dialog消失
      public synchronized void done(){
        doneNum++;
        if(doneNum == totalNum && dialog != null){
          dialog.cancel();
          dialog.dismiss();
        }
      }

3、编写网络异步请求操作NetworkTask类，继承AsyncTask<byte[], String, String>
  NetworkTask extends AsyncTask<byte[], String, String>
  1)定义变量
    private INetwork inetwork ;
    private DialogControl dcon ;

  2)编写构造器
  public NetworkTask(INetwork inetwork,DialogControl dcon) {
    this.inetwork = inetwork ;
    this,dcon = dcon ;
    if(dcon != null){
      dcon.show(this);
    }
  }

  3)编写执行方法
  /** 触发当前 AsyncTask */
  public void execute(){
    if(inetwork != null && inetwork.getSubmitData() != null){
      this.execute("".getBytes());
    }
  }

  4)重写doInBackground方法，完成网络请求，返回数据
  @Override
  protected String doInBackground(byte[]... params) {
    Map<String, Object> submitData = inetwork.getSubmitData();
    String url = (String) submitData.get("url");
    String nameSpace = (String) submitData.get("namespace");
    String methodName = (String) submitData.get("methodName");
    ArrayList<Entry> entries = (ArrayList<Entry>) submitData.get("entries");
    
    SoapObject soapObject = new SoapObject(nameSpace, methodName);
    for(Entry entry : entries){
      soapObject.addProperty(entry.getKey(), entry.getValue());
    }
    
    SoapSerializationEnvelope envelop = new SoapSerializationEnvelope(SoapEnvelope.VER11);
    envelop.bodyOut = soapObject;
    envelop.dotNet = false;
    envelop.setOutputSoapObject(soapObject);
    
    HttpTransportSE trans = new HttpTransportSE(url);
    try {
      trans.call(null, envelop);
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (XmlPullParserException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    
    SoapObject resultObj = (SoapObject) envelop.bodyIn;
    String result = resultObj.getProperty(0).toString();
    return result;
  }

  5)重写 onPostExecute(String result)，完成主UI线程中的UI控件的更新
  @Override
  protected void onPostExecute(String result) {
    inetwork.result(result);
    //通知弹出框管理器处理弹出框
    if(control != null){
      control.done();
    }
  }



4，编写网络请求执行类Network
  提供静态方法
  1)验证网络是否可用isNetworkAvailable(Context context)
    public static boolean isNetworkAvilable(Context context){
      ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
      NetworkInfo[] infos = cm.getAllNetworkInfo();
      if(infos != null){
        for(NetworkInfo info : infos){
          if(info.getState() == NetworkInfo.State.CONNECTED){
            return true;
          }
        }
      }
      return false;
    }
  2)提交网络请求的方法
    submit(final Context context , INetWork... inetWork)
    //验证网络是否可用，如果验证ok就执行网络请求，如果验证失败就弹出提示框要求设置网络
    public static void submit(final Context context, INetwork...inetwork){
      System.out.println(NetWork.isNetworkAvilable(context));
      if(!NetWork.isNetworkAvilable(context)){
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("社区服务");
        builder.setMessage("使用此应用程序需要链接网络，请在设置中开启移动网络或无线网络");
        AlertDialog dialog = builder.setPositiveButton("设置", new DialogInterface.OnClickListener() {

          @Override
          public void onClick(DialogInterface dialog, int which) {
            dialog.cancel();
            Intent intent = new Intent(android.provider.Settings.ACTION_SETTINGS);
            context.startActivity(intent);
          }
        })
        .setNegativeButton("取消", new DialogInterface.OnClickListener() {

          @Override
          public void onClick(DialogInterface dialog, int which) {
            dialog.cancel();
          }
        }).create();

        dialog.show();
      }else{
        DialogControl control = new DialogControl(context, inetwork.length);
        ProgressDialog dialog = control.createDialog();
        control.setDialog(dialog);
        for(INetwork inet :inetwork){
          new NetworkTask(inet, control).execute();
        }
      }
    }

5)， 在相应的Activity中编写内部类MyNetWork，实现 INetWork接口
     在相应的事件中进行网络请求
      NetWork.submit(Activity.this, new MyNetwork)
       
    
   
      
