通知
  使用步骤
     1.定义变量NotificationManager nm
     2.获得通知管理器服务
       nm = getSystemService(NOTIFICATION_SERVICE);
     3.创建通知对象
       Notification n = new Notification();
       //设置相关属性
       ....
      //构建一个挂起跳转页面
      Intent intent = new Intent(Mainactivity.this,xxx.class)
      PeddingIntent pi = PeddingIntent.getActivity(Mainactivity.this,0,intent,int flag);

     //设置内容及pi
     n.setLatestEventInfo(context,title,content,pi);
     //发通知
     nm.notify(id,n);


 第二种方法
    1.定义变量NotificationManager nm
    2.获得通知管理器服务
       nm = getSystemService(NOTIFICATION_SERVICE);

    3.创建NotificationCompat.Build对象
      NotificationCompat.Build build = new NotificationCompat.Build(MainActivity.this);
    4.设置相关属性
      build = builder.setSmallIcon(R.drawable.ic_launcher)
			.setTicker("您有新的短消息")
			.setContentTitle("1234567")
			.setContentText("不想说了");
     
     //构建一个挂起跳转页面
      Intent intent = new Intent(Mainactivity.this,xxx.class)
      PeddingIntent pi = PeddingIntent.getActivity(Mainactivity.this,0,intent,int flag);
      build = build.setContentIntent(pi);
      ......

   5.发送通知
       nm.notify(id,build.build());


传感器
   步骤
   1.定义真机传感器管理器
    SensorManage sm
   2.获得真机传感器管理器服务
    sm = getSystemService(SENSOR_SERVICE);
   3.自定义MySenserEventListener 类 实现SenserEventListener接口 重写 onSensorChanged(   event)
     根据不同的传感器进行不同的数据处理 
   4.在onResum()方法中给真机传感器管理器注册相应传感器的监听器
   5.在onPause()方法中注销传感器的监听
   
    