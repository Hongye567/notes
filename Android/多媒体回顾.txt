多媒体
  1，MediaPlayer
      


  2,MediaRecorder
    1，实例化MediaRecorder对象
    2，设置输出文件格式  THREE_GPP
    3，设置音频编码格式  AMR_NB
    4，设置音频来源 MIC
    5，设置音频文件输出路径
    6,准备录音
    7，开始录音

    停止录音
       1，mr.stop()
       2, mr.release()
       3, mr = null ;



  3,videoview
    1,在布局文件中添加videoview的控件
    2，获得videoview控件
    3，设置videoview的视频源
    4，设置videoview的媒体控制
    5,开始播放
    6,为videoview请求焦点


地图
   


传感器
  1,定义真机传感器管理器
  2，获得真机传感器管理器服务
  3，自定义MysensorEventListener 继承sensorEventListener 
     重写sensorChanged()
  4,为真机传感器管理器注册传感器及监听
  5,注销

通知
  1,定义通知管理器
  2,获得通知管理器服务
    nm = getSystemService(NOTIFICATION_SERVICE);
  3,创建Notification.Build对象
  4，创建挂起Intent 对象
     Intent intent new Intent(context,ccc.class); //当点击通知时需要跳转到的页面
     PendingIntent pi = PendingIntent.getActivity(context,requestcod,intent,flag);
  5，设置相关属性

  6,发通知
     nm.notify(id,bild.buid());
 


Handler
  处理线程与线程之间的通信
  子线程给主线程发消息
    1，在主线程中初始化一个Handler对象mainHandler
        重写handlMessage方法
    2，在子线程中发送消息
       mainHandler.sendEmptyMessage(int what);
       Message msg = mainHandler.obtainMessage();
       msg.obj = obj ;
       msg.sendtoTarget();
       mainHandler.sendMessage(msg);

   
  将一个普通线程变为循环线程
    就是在run()方法开始的时候调用Looper.prepare()
    在run()结束的时候调用Looper.loop();



上传图片，socket


相机
  步骤：
     1，定义变量
         SurfaceView sfv
         Camera camera
         Button bt
         SurfaceHolder holder 
     2,实例化变量
         sfv = (SurfaceView)findViewById(R.id.sfv);
         bt = (Button)findViewById(R.id.bt);
         holder = sfv.getHolder();
     3.编写异步保存类SavePicture 继承 AsyncTask<parameter,progress,result>
         public String doInBackground(byte[]... pars)
         {
               //保存图片
               

         }

     4.为holder添加回调
       holder.addCallback(new SurfaceHolder.callback()
       {
                 //当预览界面被创建的时候调用
                 surfacecreate()
                 {
                        //打开摄像头
                        camera = Camera.open()；
                        //设置预览角度
                        camera.setDisplayOritation(90);//角度是90的整数倍
                        //设置预览显示器
                        camera.setPlayViewDisPlay(holder);
                        //开始预览
                        camera.startPreView();

                 }
                 surfacechanged()
                 {
                      //获取相机参数
                      //设置相机参数
                      //开始预览


                  }
                 surfaceDestroy()   
                 {
                         //释放相机资源
                         camera.release();
                         camera = null ;

                  }
      
       })
    5.设置bt的监听事件，在监听事件中进行拍照
        camera.tackPicture(null,null,new PicturCallback()
         {
                    onPictureTacken(byte[] data, Camera c)
                    {

                          //保存图片
                            new SavePicture().excute(data);
                          //开始预览
                            camera.startPreView(); 
                    }
 
         });
       
    6.添加权限
        <!-- 调用摄像头功能 -->
        <uses-feature android:name="android.hardware.camera" />
        <!-- 调用自动对焦功能 -->
	<uses-feature android:name="android.hardware.camera.autofocus" />
	<!-- 设置允许拍照的权限-->
	<uses-permission android:name="android.permission.CAMERA" />
	<!-- SD卡创建与删除文件权限-->
	<uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" />
	<!-- 配置SD卡权限-->
	<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />


自定义控件
    
   继承自View的自定义控件
    1.重写父类的三个构造方法
    2.重写onDraw()方法
      //定义画笔对象
       Paint paint = new Paint();
       //为画笔设置颜色
       paint.setColor();  
      //设置画布背景
       canvas.drawColor(int red);
      //画圆
      canvas.drawCircle(float x,float y, float r,Paint p); 

      //画直线
      canvas.drawLine(float x ,float y , float xend ,folat yend , Paint p);


      Path path = new Path();
      //设置起点
      path.moveTo(float x ,float y);
      //设置线的走向
      path.lineTo(float x ,float y);
      path.lineTo(float x ,float y);
      path.close();
      
      //画线
      canvas.drawPath(path,paint);
      //在线上写字
      canvas.drawTextOnPath(String text,Path path ,float x,float y, Paint paint);
     

继承自布局的自定义组合控件
    1,重写构造方法
       一个参数的构造方法
          调用两个参数的构造方法
       两个参数的构造方法
          实例化控件
          设置控件
          添加控件









