音乐播放器

service
   使用方式
    1.startService()
       在没有服务实例：Context.startService()-->onCreate()-->onStartCommand()-->running
       有服务实例：Context.startService()-->onStartCommand()-->running //start多次
       Context.stopService()-->onDestroy()-->die
    2.binService()
       Context.bindService()-->onCreate()-->onBind()-->running 只能bind一次
       Context.unbindService()-->onUnbind()-->onDestroy()-->die
       两种编写方式：
          服务的内部类
          1) 继承Binder 提供获得当前服务对象的方法
          Activity的创建连接时
          ServiceConnection conn = new ServiceConnetion()
          {
                //在服务绑定的时候调用
                (  Ibinder service)
               {
                     MyService myservice = ((Myservice.MyBinder)service).getService();
               }

          }
         
          2) 面向接口的编程
             自定义接口，并在接口中描述方法
              服务的内部类 继承 Binder 实现自定接口
                 重写自定义接口中的方法
               
               Activity的创建连接时
          ServiceConnection conn = new ServiceConnetion()
          {
                //在服务绑定的时候调用
                (  Ibinder service)
               {
                     IMyInterface myservice = (IMyInterface)service;
               }

          }


    3.aidl 调用远程Service
      aidl Android 接口 定义 语言
      注意：将服务端的aidl文件连同包一起导入至客户端
 


broadcastReceiver
    两种注册方式
    静态
      1,编写自定义的广播接收器，继承BroadcastReceiver   //生命周期只有10s左右
         重写onReceive()方法
      2,在manifest.xml文件中注册
        <receiver  android:name="xxx.xxx.xx">
            <intent-filter>
                <action android:name="xxx.xx.xx"/>
            </intent-filter>
        </receiver> 
      3,发送广播
       Intent intent = new Intent("xxx.xx.xx");
       sendBroacast(intent);  

    动态
      1,编写自定义的广播接收器，继承BroadcastReceiver   //生命周期只有10s左右
         重写onReceive()方法
      2,在Activity的onStart()方法中注册
         MyReceiver mr = new MyReceiver();
         IntentFilter filter = new IntentFilter("xxx.xx.xxx");
         registerReceiver(mr,filter);
      3,在Activity的onStop()方法中注销
         unRegisterReceiver(mr);

    普通广播
        只要注册的相同action的广播接收器，均能收到该action的广播，接收无序，完全异步

    有序广播
        有优先级，优先级最高最先接收到广播 数字越大优先级越高
        优先级高的广播接收器可以终止广播的传播，也可以改变广播的内容
        ***注册的时候需要在intent-filter 标签中加上优先级配置

    系统广播

ContentProvider
    获得系统联系人
    1,获得ContentResolver对象
      ContentResolver cr = getContentResolver();
    2,获得联系人的uri
      Uri uri = Phone.CONTENT_URI ;
    3,查询
      Cursor c = cr.query(uri,null,null,null,null,null,null);

   自定义ContentProvider 
     1,编写自定义ConteProvider 继承ContentProvider
       1) 定义全局变量
          MyDBHelper helper ;
          UriMatcher matcher = new UriMatcher(int code); //code 代表的在注册的uri中找不到传入的uri的匹配码

       2)在构造方法中实例化helper
       3)在静态代码块中注册URi
         static{
              matcher.addUri(String authorties,String path,int code);
        }
    
       4)在相应的方法中根据传入的uri的不同进行不同的操作
          int code = matcher.match(uri)
          switch(code)
          {


           }

    2,注册，在manifest.xml
           <provider android:name="ccc.vv.vv"
              android:authorities="xx.tt.dgfdg"
           >
           </provider>
     
    
网络编程

   webView的使用
     webview 访问网络资源
     1)注册权限
       <uses-permission android:name="android.permission.INTERNET">
     2)使用webview.loadUrl(String url); //http://www.baidu.com  
     3) webview.setWebViewClient(new WebViewClient(){
          shouldOverridLoadUrl(WebView v, String url)
           {
                  webview.loadUrl(String url);
          }

      })
   
    webview 加载原生的HTML文件
     1)注册权限
       <uses-permission android:name="android.permission.INTERNET">
     2)使用webview.loadUrl(String url); //f:/android_asstes/xxx/xx.html

    httpGet
       URL url = new URL(String url_str) ;
       HttpUrlConnection conn = url.openConnection();
       //获得输入流准备接收数据
       InputStream in = conn.getInputStream() ;
      //获得响应码
       int code = conn.getResponseCode();
      //根据不同的响应码进行不同的操作



  httpPost
     1)注册权限
       <uses-permission android:name="android.permission.INTERNET">
     2)在网络访问线程中编写网络访问代码
        1.编写网址
          String url_str = "http://192.168.0.103:8080/emp/employee.php?action=findAllEmps&type=xml" ;
        2.创建URL对象
          URL url = new URL(url_str);
        3.获得HttpUrlConnection对象
          HttpUrlConnection Conn = url.openConnection();
        4.设置请求方法
          conn.setRequestMethod("POST");
        5.获得输入输出流
          InputStream in = conn.getInputStream();
        6.获得服务端响应码
          int code = conn.getResponseCode();
        7.根据不同的响应码进行不同的操作

        8.释放资源


  Socket编程
         1)注册权限
            <uses-permission android:name="android.permission.INTERNET">
         2)在网络访问线程中编写网络访问代码
            1.创建Socket对象
              Socket sc = new Socket(String ip,int port);//ip 是服务端的ip地址，port是服务端的监听端口号
            2.获得服务端响应流
              InputStream in = sc.getInputStream();
            3.处理数据
            4.释放资源




