(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{324:function(a,t,s){"use strict";s.r(t);var v=s(0),e=Object(v.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"static-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-关键字","aria-hidden":"true"}},[a._v("#")]),a._v(" static 关键字")]),a._v(" "),s("ol",[s("li",[a._v("修饰成员变量")])]),a._v(" "),s("p",[a._v("类变量和实例变量的区别")]),a._v(" "),s("ul",[s("li",[a._v("类变量使用 static 修饰，实例变量没有")]),a._v(" "),s("li",[a._v("类变量的值的值作用于整个类，实例变量的值作用于某个对象")]),a._v(" "),s("li",[a._v("类变量的操作可以使用"),s("code",[a._v("对象名.变量名")]),a._v("，也可以使用"),s("code",[a._v("类名.变量名")]),a._v("；实例变量只可以使用"),s("code",[a._v("对象名.变量名")]),a._v("操作")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[a._v("修饰成员方法")]),a._v(" "),s("p",[a._v("类方法和实例方法的区别")]),a._v(" "),s("ul",[s("li",[a._v("类方法使用 static 修饰，实例方法没有")]),a._v(" "),s("li",[a._v("类方法只可以调用类变量和类方法，实例方法可以调用类变量和类方法，也可以调用实例变量和实例方法")]),a._v(" "),s("li",[a._v("类方法可以使用"),s("code",[a._v("对象名.方法")]),a._v("调用，也可以使用"),s("code",[a._v("类名.方法名")]),a._v("调用；实例方法只可以使用"),s("code",[a._v("对象名.方法名")]),a._v("调用")])])]),a._v(" "),s("li",[s("p",[a._v("修饰代码块")]),a._v(" "),s("p",[a._v("先执行静态的代码块，然后执行普通的代码块，最后执行构造器")]),a._v(" "),s("p",[a._v("静态代码块在创建多个对象时，只在第一次创建对象时执行一次，以后不再执行")])])]),a._v(" "),s("h2",{attrs:{id:"访问修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符","aria-hidden":"true"}},[a._v("#")]),a._v(" 访问修饰符")]),a._v(" "),s("p",[a._v("限制访问权限")]),a._v(" "),s("p",[a._v("public（公共的），protected（受保护的），缺省的，private（私有的）")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("修饰成员变量和方法")]),a._v(" "),s("ul",[s("li",[a._v("在同类中，可以访问所有的属性和方法")]),a._v(" "),s("li",[a._v("在同包，不同类中，可以访问非私有的属性和方法")]),a._v(" "),s("li",[a._v("在不同包中，只可以访问公共的属性和方法")]),a._v(" "),s("li",[a._v("在不同包中的子类中，可以访问公共的和受保护的属性和方法")])])]),a._v(" "),s("li",[s("p",[a._v("修饰构造器\n同上")])]),a._v(" "),s("li",[s("p",[a._v("修饰类（public   缺省的）")]),a._v(" "),s("p",[a._v("公共的类，可以在同包和不同包中访问；缺省的类，只可以在同包中被访问")])])]),a._v(" "),s("h2",{attrs:{id:"封装（私有化）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装（私有化）","aria-hidden":"true"}},[a._v("#")]),a._v(" 封装（私有化）")]),a._v(" "),s("p",[a._v("为了信息的安全，把所有的属性全部私有化，提供公共的 get 和 set 方法")]),a._v(" "),s("p",[a._v("以后所遇到的所有的属性必须全部私有化")]),a._v(" "),s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包","aria-hidden":"true"}},[a._v("#")]),a._v(" 包")]),a._v(" "),s("p",[a._v("文件夹")]),a._v(" "),s("p",[a._v("package  包名;  // 要放在整个文件的第一行")]),a._v(" "),s("h2",{attrs:{id:"单例模式（该类只能创建唯一的一个对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式（该类只能创建唯一的一个对象）","aria-hidden":"true"}},[a._v("#")]),a._v(" 单例模式（该类只能创建唯一的一个对象）")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 定义一个私有的静态的属性来保存该类创建的唯一的对象")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" aa "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 私有化构造器，防止在外界被调用")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 提供一个公共的静态方法，来返回该类唯一的对象")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" aa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("从一个类（父类）中派生出另一个类（子类）")]),a._v(" "),s("p",[a._v("格式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" 子类名 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" 父类名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    类体\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("子类可以继承父类中所有的非私有的属性和方法，也可以自己扩展自己独有的属性和方法")]),a._v(" "),s("p",[a._v("子类不可以继承父类的构造器")]),a._v(" "),s("p",[a._v("单继承（一个子类对象对应一个父类对象）")]),a._v(" "),s("p",[a._v("方法的重写：")]),a._v(" "),s("ul",[s("li",[a._v("在子类继承父类中，方法名相同，返回值相同，参数列表相同（个数相同，数据类型相同，顺序相同）")]),a._v(" "),s("li",[a._v("子类的访问修饰符大于或等于父类的访问修饰符")])]),a._v(" "),s("h2",{attrs:{id:"super-关键字（父类对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super-关键字（父类对象）","aria-hidden":"true"}},[a._v("#")]),a._v(" super 关键字（父类对象）")]),a._v(" "),s("ol",[s("li",[a._v("当子类的属性和方法与父类的属性和方法重名时，可以使用 super 来调用父类隐藏的属性和方法")]),a._v(" "),s("li",[a._v("在子类的构造器中，可以使用 super 来指定父类的哪个构造器来创建一个父类对象与子类对象一一对应")]),a._v(" "),s("li",[a._v("在子类创建对象时，系统会自动指定父类的无参的构造器来创建父类对象与子类对象一一对应")])])])},[],!1,null,null,null);t.default=e.exports}}]);