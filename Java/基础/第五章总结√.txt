
一，面向对象 
	把客观世界中的事物当成对象，该对象所解决的实际问题，
	使用java语句把它体现出来

	把现实问题抽象化

二，对象
	在客观世界中真实存在且能够相互区分的个体
		
	万物皆为对象
	统称不是对象

三，类
	具有相同的属性和行为的对象集合
	统称

	类与对象的关系
		类是对象的抽象
		类是对象的模板
		对象是类的具体
		对象是类的实例

四，类的写法
	[修饰符] class 类名{
		//类体
		//属性  --  成员变量
		//[修饰符] 数据类型  变量名[=值];
		int age;
		String name;
		....

		//行为  --  成员方法
		//[修饰符] (void|返回值类型) 方法名([参数列表]){ 方法体 }
		public void say(){
			//方法中可以调用属性
			.....
		}

		//构造器 构造方法 构造函数  --  用来创建对象  构造器名必须和类名保持一致
		//[修饰符] 构造器名([参数列表]){}
		public 类名(){
		
		}

		//主方法
		public static void main(String [] args){
			//创建对象
			//类名 对象名= new 构造器名();
			

			//调用属性和方法
			对象名.属性名=值;
			对象名.属性名
			对象名.方法名([参数列表]);
		}
	
	}

五，方法的重载
	在同一个类中，方法名相同，参数列表不同（数目不同，数据类型不同，顺序不同）

六，构造器（构造方法，构造函数）
	作用： 用来创建对象
	格式： public 构造器名(参数列表){}
	注意： 构造器名必须和类名保持一致
	如果一个类中，没有直接写构造器，则系统默认会提供一个无参的构造器（不显示）
	如果一个类中，直接写了构造器，则系统不再提供构造器

	构造器的参数列表的作用：
		用来为对象的属性初始化

七，全局变量和局部变量
	全局变量：类中的成员变量就是全局变量
	局部变量： 在方法中定义的变量为局部变量
	
	全局变量的作用范围是整个类中
	局部变量的作用范围是某个方法中

	注意： 全局变量和局部变量可以重名

八，this关键字
	1，当全局变量和局部变量重名时，可以使用this关键字来调用全局变量
	2，在一个构造器中可以使用this来调用另一个构造器
	   仅仅是执行其方法体，而不是创建对象
	   注意：使用this时，则该语句必须是构造器中的第一句
